
void main(){
   // method1();
  // method2();
  //  method3();
  //  method5(method4x());
   method6();
}

/**
 * 定义字符串
 * '''''' 三引号可以显示换行
 * 字符串拼接
 * 数据类型
 */
void method1(){
   var str1 = "1111";
   print(str1);
   var str2 = '''
        Hello World
        Welcone
   ''';
   print(str2);

   const str3 = "33333";
   print(str3);

   print("$str1 $str2");

   var num1 = 12; //int 型
   var num2 = 12.2; //double 型
   print(num1);
   print(num2);

   var boo1 = false;
   print(boo1);

   //数组的操作
   var list1 = [1,2,3];
   print(list1);
   print(list1.length);
   print(list1[0]);

   //集合
   var list2 = new List<String>();
   list2.add("test");
   print(list2);

   //map的操作
   var map1 = {
      "key1":1,
      "key2":2
   };
   print(map1);
   print(map1["key1"]);

   var map2 = new Map();
   map2["key1"] = 45;
   print(map2["key1"]);

   if(map2 is Map){
      print("map2 是 Map 类型");
   }
}

/***
 * 运算符
 */
void method2(){
   var a;
   print(a);
   print(a??0);

   a??=20;
   print(a);


   var str1 = "123";
   var num1 = int.parse(str1);

   print(str1.isEmpty);
   // print(str1.isNan);
}

/**
 * 操作集合
 */
void method3(){
   var list1 = ["1","2","3","4"];
   print(list1);
   print(list1.reversed);
   print(list1.reversed.toList());
   list1.addAll(["5","6"]);
   var index = list1.indexOf("5");
   print(index);
   list1.fillRange(0,2,"0");
   print(list1);

   //set 集合
   var set1 = new Set();
   set1.add("1");
   set1.add("2");
   print(set1);

   //forEach 遍历
   list1.forEach((value){
      print(value);
   });
}

/**
 * 可选参数,[] 包着可选参数
 */
void method4(String name,[int age=10]){
   print(name);
}

method4x(){
   print("method4_1");
}
/**
 * 方法作为方法参数
 */
void method5(fn){
   fn();
}

/**
 * 闭包
 */
void method6(){
   var a = 123;
   var b=(){
      a++;
      print(a);
   };
   b();
   print(a);
}

void method1(){
   var person = new Person();
   person.printName();
   print("age= ${Person.age}");
}

class Person{
   var name = "11";
   static var age = 29;

   void printName(){
      print(name);
   }
}












